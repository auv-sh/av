name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            exe: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
            exe: ""
          - os: macos-14
            target: aarch64-apple-darwin
            archive: tar.gz
            exe: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            exe: ".exe"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools and OpenSSL for musl target
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          # Install cross-compilation tools for OpenSSL
          sudo apt-get install -y pkg-config libssl-dev

          # Create a directory for musl OpenSSL
          mkdir -p /tmp/musl-openssl

          # Download and compile OpenSSL for musl
          cd /tmp/musl-openssl
          wget https://www.openssl.org/source/openssl-3.0.8.tar.gz
          tar xzf openssl-3.0.8.tar.gz
          cd openssl-3.0.8

          # Configure and compile OpenSSL for musl
          CC="musl-gcc -fPIC" ./Configure no-shared no-async --prefix=/usr/local/musl --openssldir=/usr/local/musl/ssl linux-x86_64
          make -j$(nproc)
          sudo make install_sw

          # Return to the original directory
          cd $GITHUB_WORKSPACE

      - name: Build (non-musl targets)
        if: matrix.target != 'x86_64-unknown-linux-musl'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (musl target)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        env:
          OPENSSL_DIR: /usr/local/musl
          OPENSSL_INCLUDE_DIR: /usr/local/musl/include
          OPENSSL_LIB_DIR: /usr/local/musl/lib
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_PATH: /usr/local/musl/lib/pkgconfig
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare package (unix)
        if: matrix.archive == 'tar.gz'
        shell: bash
        run: |
          set -euxo pipefail
          BIN=av
          OUT_DIR=dist
          mkdir -p "$OUT_DIR"
          SRC="target/${{ matrix.target }}/release/${BIN}"
          ASSET="${BIN}-${GITHUB_REF_NAME}-${{ matrix.target }}.tar.gz"
          tar -C "target/${{ matrix.target }}/release" -czf "$OUT_DIR/$ASSET" "$BIN"

      - name: Prepare package (windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $Bin = 'av.exe'
          $OutDir = 'dist'
          New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
          $Src = "target/${{ matrix.target }}/release/$Bin"
          $Asset = "av-$env:GITHUB_REF_NAME-${{ matrix.target }}.zip"
          Compress-Archive -Path $Src -DestinationPath "$OutDir/$Asset"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: av-${{ github.ref_name }}-${{ matrix.target }}
          path: dist/*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_TOKEN }}
